# DNS resolution using Docker DNS server (Do not remove)
resolver 127.0.0.11 ipv6=off; # Docker DNS

# dev_neocenter
upstream dev_neocenter {
    zone dev_neocenter 64k;

    # A resolver can be set in this upstream block specific to this upstream group.
    # * Replace with the IP address of your resolver
    # * A short resolver_timeout will ensure DNS service discovery is fresh
    # resolver <IP of private DNS resolver> valid=1s; 
    # e.g. resolver 10.0.0.1 [82c8:e72d:d083:a288:ebfa:e239:ad67:4dfc] resolver_timeout 5s;

    server nginx1:8080;
    server nginx2:8080;

    # backup - marks the server as a backup server. Connections to the backup
    # server will be passed when the primary servers are unavailable.

    # Load Balancing Round Robin - Default ip_hash; hash [key] [consistent];
    # least_conn; least_time header last_byte [inflight]; random [two [method]];

    #  weight=1, as 1 is the default value.
    #  The server with the highest weight, will receive the majority
    #  of traffic. In the above setup:

    # In our example, imagine there are ten buckets, each with 10% of the possible
    # hashes in it. Six buckets (60% of the possible hashes) are associated with
    # server localhost:9091, three buckets (30%) with server localhost:9097, two buckets (20%) with server localhost:9098
    # and one buckets (10%) with server localhost:9098

    # Activates the cache for connections to upstream servers
    keepalive 64;

}


# dev_termdm
upstream dev_termdm {
    zone dev_termdm 64k;

    # A resolver can be set in this upstream block specific to this upstream group.
    # * Replace with the IP address of your resolver
    # * A short resolver_timeout will ensure DNS service discovery is fresh
    # resolver <IP of private DNS resolver> valid=1s;
    # e.g. resolver 10.0.0.1 [82c8:e72d:d083:a288:ebfa:e239:ad67:4dfc] resolver_timeout 5s;

    server nginx1:808;
    server nginx2:808;

    # backup - marks the server as a backup server. Connections to the backup
    # server will be passed when the primary servers are unavailable.

    # Load Balancing Round Robin - Default ip_hash; hash [key] [consistent];
    # least_conn; least_time header last_byte [inflight]; random [two [method]];

    #  weight=1, as 1 is the default value.
    #  The server with the highest weight, will receive the majority
    #  of traffic. In the above setup:

    # In our example, imagine there are ten buckets, each with 10% of the possible
    # hashes in it. Six buckets (60% of the possible hashes) are associated with
    # server localhost:9091, three buckets (30%) with server localhost:9097, two buckets (20%) with server localhost:9098
    # and one buckets (10%) with server localhost:9098

    # Activates the cache for connections to upstream servers
    keepalive 64;

}


##################
# Load Balancing #
##################

# See https://www.nginx.com/blog/choosing-nginx-plus-load-balancing-techniques/
#
# - Round Robin (the default) Distributes requests in order across the list of
#   upstream servers.
#
# - Least Connections Sends requests to the server with the lowest number of
#   active connections. e.g. least_conn;
#
# - Least Time Exclusive to NGINX Plus. Sends requests to the server selected by
#   a formula that combines the fastest response time and fewest active
#   connections: `least_time header | last_byte [inflight];` e.g. least_time
#   last_byte;
#
#  - Hash Distributes requests based on a key you define, such as the client IP
#    address or the request URL. NGINX Plus can optionally apply a consistent
#    hash to minimize redistribution of loads if the set of upstream servers
#    changes: `hash key [consistent];` e.g. hash $request_uri consistent;
#
#  - IP Hash (HTTP only) Distributes requests based on the first three octets of
#    the client IP address. e.g. ip_hash;
#
#  - Random with Two Choices Picks two servers at random and sends the request
#    to the one that is selected by then applying the Least Connections
#    algorithm (or for NGINX Plus the Least Time algorithm, if so configured):
#    `random [two [method]]` e.g. random two; # Round Robin random two
#    least_conn; # Least connections random two least_time=last_byte; # Least
#    time: use header or last_byte